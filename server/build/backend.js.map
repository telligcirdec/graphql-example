{"version":3,"sources":["webpack:///webpack/bootstrap 2e0d25d0bece2153bebf","webpack:///./server/js/server.js","webpack:///./server/js/schema.js","webpack:///external \"graphql\"","webpack:///./server/js/starWarsSchema.js","webpack:///./server/js/starWarsData.js","webpack:///external \"express\"","webpack:///external \"express-graphql\""],"names":[],"mappings":"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","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 2e0d25d0bece2153bebf\n **/","var express = require('express');\nvar app = express();\nvar graphqlHTTP = require('express-graphql');\n\nimport {\n    MyGraphQLSchema\n}\nfrom './schema.js';\n\nimport {\n    StarWarsSchema\n}\nfrom './starWarsSchema.js';\n\n\nvar app = express();\n\napp.configure(function() {\n    app.use('/graphql', graphqlHTTP({schema: StarWarsSchema,graphiql: true}));\n});\n\nvar myLogger = function(req, res, next) {\n    console.log(req.originalUrl);\n    next();\n};\n\napp.use(myLogger);\n\nvar server = app.listen(process.env.PORT, process.env.IP, function() {\n    var host = server.address().address;\n    var port = server.address().port;\n\n    console.log('Example app listening at http://%s:%s', host, port);\n});\n\n\n/** WEBPACK FOOTER **\n ** ./server/js/server.js\n **/","import {\n  graphql,\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLString\n} from 'graphql';\n\nexport var MyGraphQLSchema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'ExampleQuery',\n    description: 'Root query type description',\n    fields: {\n      hello: {\n        type: GraphQLString,\n        description: 'Hello to the world',\n        resolve() {\n          return 'world';\n        }\n      }\n    }\n  })\n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./server/js/schema.js\n **/","module.exports = require(\"graphql\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"graphql\"\n ** module id = 2\n ** module chunks = 0\n **/","/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nimport {\n  GraphQLEnumType,\n  GraphQLInterfaceType,\n  GraphQLObjectType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLSchema,\n  GraphQLString\n} from 'graphql';\n\nimport { getFriends, getHero, getHuman, getDroid } from './starWarsData.js';\n\n/**\n * This is designed to be an end-to-end test, demonstrating\n * the full GraphQL stack.\n *\n * We will create a GraphQL schema that describes the major\n * characters in the original Star Wars trilogy.\n *\n * NOTE: This may contain spoilers for the original Star\n * Wars trilogy.\n */\n\n/**\n * Using our shorthand to describe type systems, the type system for our\n * Star Wars example is:\n *\n * enum Episode { NEWHOPE, EMPIRE, JEDI }\n *\n * interface Character {\n *   id: String!\n *   name: String\n *   friends: [Character]\n *   appearsIn: [Episode]\n * }\n *\n * type Human : Character {\n *   id: String!\n *   name: String\n *   friends: [Character]\n *   appearsIn: [Episode]\n *   homePlanet: String\n * }\n *\n * type Droid : Character {\n *   id: String!\n *   name: String\n *   friends: [Character]\n *   appearsIn: [Episode]\n *   primaryFunction: String\n * }\n *\n * type Query {\n *   hero(episode: Episode): Character\n *   human(id: String!): Human\n *   droid(id: String!): Droid\n * }\n *\n * We begin by setting up our schema.\n */\n\n/**\n * The original trilogy consists of three movies.\n *\n * This implements the following type system shorthand:\n *   enum Episode { NEWHOPE, EMPIRE, JEDI }\n */\nvar episodeEnum = new GraphQLEnumType({\n  name: 'Episode',\n  description: 'One of the films in the Star Wars Trilogy',\n  values: {\n    NEWHOPE: {\n      value: 4,\n      description: 'Released in 1977.',\n    },\n    EMPIRE: {\n      value: 5,\n      description: 'Released in 1980.',\n    },\n    JEDI: {\n      value: 6,\n      description: 'Released in 1983.',\n    },\n  }\n});\n\n/**\n * Characters in the Star Wars trilogy are either humans or droids.\n *\n * This implements the following type system shorthand:\n *   interface Character {\n *     id: String!\n *     name: String\n *     friends: [Character]\n *     appearsIn: [Episode]\n *   }\n */\nvar characterInterface = new GraphQLInterfaceType({\n  name: 'Character',\n  description: 'A character in the Star Wars Trilogy',\n  fields: () => ({\n    id: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The id of the character.',\n    },\n    name: {\n      type: GraphQLString,\n      description: 'The name of the character.',\n    },\n    friends: {\n      type: new GraphQLList(characterInterface),\n      description: 'The friends of the character, or an empty list if they ' +\n                   'have none.',\n    },\n    appearsIn: {\n      type: new GraphQLList(episodeEnum),\n      description: 'Which movies they appear in.',\n    },\n  }),\n  resolveType: character => {\n    return getHuman(character.id) ? humanType : droidType;\n  }\n});\n\n/**\n * We define our human type, which implements the character interface.\n *\n * This implements the following type system shorthand:\n *   type Human : Character {\n *     id: String!\n *     name: String\n *     friends: [Character]\n *     appearsIn: [Episode]\n *   }\n */\nvar humanType = new GraphQLObjectType({\n  name: 'Human',\n  description: 'A humanoid creature in the Star Wars universe.',\n  fields: () => ({\n    id: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The id of the human.',\n    },\n    name: {\n      type: GraphQLString,\n      description: 'The name of the human.',\n    },\n    friends: {\n      type: new GraphQLList(characterInterface),\n      description: 'The friends of the human, or an empty list if they ' +\n                   'have none.',\n      resolve: human => getFriends(human),\n    },\n    appearsIn: {\n      type: new GraphQLList(episodeEnum),\n      description: 'Which movies they appear in.',\n    },\n    homePlanet: {\n      type: GraphQLString,\n      description: 'The home planet of the human, or null if unknown.',\n    },\n  }),\n  interfaces: [ characterInterface ]\n});\n\n/**\n * The other type of character in Star Wars is a droid.\n *\n * This implements the following type system shorthand:\n *   type Droid : Character {\n *     id: String!\n *     name: String\n *     friends: [Character]\n *     appearsIn: [Episode]\n *     primaryFunction: String\n *   }\n */\nvar droidType = new GraphQLObjectType({\n  name: 'Droid',\n  description: 'A mechanical creature in the Star Wars universe.',\n  fields: () => ({\n    id: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The id of the droid.',\n    },\n    name: {\n      type: GraphQLString,\n      description: 'The name of the droid.',\n    },\n    friends: {\n      type: new GraphQLList(characterInterface),\n      description: 'The friends of the droid, or an empty list if they ' +\n                   'have none.',\n      resolve: droid => getFriends(droid),\n    },\n    appearsIn: {\n      type: new GraphQLList(episodeEnum),\n      description: 'Which movies they appear in.',\n    },\n    primaryFunction: {\n      type: GraphQLString,\n      description: 'The primary function of the droid.',\n    },\n  }),\n  interfaces: [ characterInterface ]\n});\n\n/**\n * This is the type that will be the root of our query, and the\n * entry point into our schema. It gives us the ability to fetch\n * objects by their IDs, as well as to fetch the undisputed hero\n * of the Star Wars trilogy, R2-D2, directly.\n *\n * This implements the following type system shorthand:\n *   type Query {\n *     hero(episode: Episode): Character\n *     human(id: String!): Human\n *     droid(id: String!): Droid\n *   }\n *\n */\nvar queryType = new GraphQLObjectType({\n  name: 'Query',\n  fields: () => ({\n    hero: {\n      type: characterInterface,\n      args: {\n        episode: {\n          description: 'If omitted, returns the hero of the whole saga. If ' +\n                       'provided, returns the hero of that particular episode.',\n          type: episodeEnum\n        }\n      },\n      resolve: (root, { episode }) => getHero(episode),\n    },\n    human: {\n      type: humanType,\n      args: {\n        id: {\n          description: 'id of the human',\n          type: new GraphQLNonNull(GraphQLString)\n        }\n      },\n      resolve: (root, { id }) => getHuman(id),\n    },\n    droid: {\n      type: droidType,\n      args: {\n        id: {\n          description: 'id of the droid',\n          type: new GraphQLNonNull(GraphQLString)\n        }\n      },\n      resolve: (root, { id }) => getDroid(id),\n    },\n  })\n});\n\n/**\n * Finally, we construct our schema (whose starting query type is the query\n * type we defined above) and export it.\n */\nexport var StarWarsSchema = new GraphQLSchema({\n  query: queryType\n});\n\n\n/** WEBPACK FOOTER **\n ** ./server/js/starWarsSchema.js\n **/","/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/**\n * This defines a basic set of data for our Star Wars Schema.\n *\n * This data is hard coded for the sake of the demo, but you could imagine\n * fetching this data from a backend service rather than from hardcoded\n * JSON objects in a more complex demo.\n */\n\nvar luke = {\n  id: '1000',\n  name: 'Luke Skywalker',\n  friends: [ '1002', '1003', '2000', '2001' ],\n  appearsIn: [ 4, 5, 6 ],\n  homePlanet: 'Tatooine',\n};\n\nvar vader = {\n  id: '1001',\n  name: 'Darth Vader',\n  friends: [ '1004' ],\n  appearsIn: [ 4, 5, 6 ],\n  homePlanet: 'Tatooine',\n};\n\nvar han = {\n  id: '1002',\n  name: 'Han Solo',\n  friends: [ '1000', '1003', '2001' ],\n  appearsIn: [ 4, 5, 6 ],\n};\n\nvar leia = {\n  id: '1003',\n  name: 'Leia Organa',\n  friends: [ '1000', '1002', '2000', '2001' ],\n  appearsIn: [ 4, 5, 6 ],\n  homePlanet: 'Alderaan',\n};\n\nvar tarkin = {\n  id: '1004',\n  name: 'Wilhuff Tarkin',\n  friends: [ '1001' ],\n  appearsIn: [ 4 ],\n};\n\nvar humanData = {\n  1000: luke,\n  1001: vader,\n  1002: han,\n  1003: leia,\n  1004: tarkin,\n};\n\nvar threepio = {\n  id: '2000',\n  name: 'C-3PO',\n  friends: [ '1000', '1002', '1003', '2001' ],\n  appearsIn: [ 4, 5, 6 ],\n  primaryFunction: 'Protocol',\n};\n\nvar artoo = {\n  id: '2001',\n  name: 'R2-D2',\n  friends: [ '1000', '1002', '1003' ],\n  appearsIn: [ 4, 5, 6 ],\n  primaryFunction: 'Astromech',\n};\n\nvar droidData = {\n  2000: threepio,\n  2001: artoo,\n};\n\n/**\n * Helper function to get a character by ID.\n */\nfunction getCharacter(id) {\n  // Returning a promise just to illustrate GraphQL.js's support.\n  return Promise.resolve(humanData[id] || droidData[id]);\n}\n\n/**\n * Allows us to query for a character's friends.\n */\nexport function getFriends(character) {\n  return character.friends.map(id => getCharacter(id));\n}\n\n/**\n * Allows us to fetch the undisputed hero of the Star Wars trilogy, R2-D2.\n */\nexport function getHero(episode) {\n  if (episode === 5) {\n    // Luke is the hero of Episode V.\n    return luke;\n  }\n  // Artoo is the hero otherwise.\n  return artoo;\n}\n\n/**\n * Allows us to query for the human with the given id.\n */\nexport function getHuman(id) {\n  return humanData[id];\n}\n\n/**\n * Allows us to query for the droid with the given id.\n */\nexport function getDroid(id) {\n  return droidData[id];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./server/js/starWarsData.js\n **/","module.exports = require(\"express\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express\"\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = require(\"express-graphql\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express-graphql\"\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}